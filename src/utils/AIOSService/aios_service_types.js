import Thrift from './thrift';
//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}

let aios = {}
if (typeof aios === 'undefined') {
  aios = {};
}
if (typeof module !== 'undefined' && module.exports) {
  module.exports.aios = aios;
}
aios.ResultCode = {
  'SUCCESS': 0,
  'ERROR_CLIENT_NOT_REGISTERED': 1,
  'ERROR_CLIENT_ALREADY_REGISTERED': 2,
  'ERROR_INVALID_PARAM': 3,
  'ERROR_INTERNAL': 4
};
aios.RegisterResponse = function (args) {
  this.code = null;
  this.wsUrl = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.wsUrl !== undefined && args.wsUrl !== null) {
      this.wsUrl = args.wsUrl;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
aios.RegisterResponse.prototype = {};
aios.RegisterResponse.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.wsUrl = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.RegisterResponse.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('RegisterResponse');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.wsUrl !== null && this.wsUrl !== undefined) {
    output.writeFieldBegin('wsUrl', Thrift.Type.STRING, 2);
    output.writeString(this.wsUrl);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.CommonResponse = function (args) {
  this.code = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
aios.CommonResponse.prototype = {};
aios.CommonResponse.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.CommonResponse.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('CommonResponse');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.IntentMessage = function (args) {
  this.clientId = null;
  this.intentType = null;
  this.params = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientId is unset!');
    }
    if (args.intentType !== undefined && args.intentType !== null) {
      this.intentType = args.intentType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field intentType is unset!');
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyMap(args.params, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field params is unset!');
    }
  }
};
aios.IntentMessage.prototype = {};
aios.IntentMessage.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.clientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.intentType = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.MAP) {
          this.params = {};
          var _rtmp31 = input.readMapBegin();
          var _size0 = _rtmp31.size || 0;
          for (var _i2 = 0; _i2 < _size0; ++_i2) {
            if (_i2 > 0) {
              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {
                input.rstack.pop();
              }
            }
            var key3 = null;
            var val4 = null;
            key3 = input.readString().value;
            val4 = input.readString().value;
            this.params[key3] = val4;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.IntentMessage.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('IntentMessage');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.intentType !== null && this.intentType !== undefined) {
    output.writeFieldBegin('intentType', Thrift.Type.STRING, 2);
    output.writeString(this.intentType);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.params));
    for (var kiter5 in this.params) {
      if (this.params.hasOwnProperty(kiter5)) {
        var viter6 = this.params[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.ClientMessage = function (args) {
  this.fromClientId = null;
  this.toClientId = null;
  this.content = null;
  this.messageType = null;
  if (args) {
    if (args.fromClientId !== undefined && args.fromClientId !== null) {
      this.fromClientId = args.fromClientId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fromClientId is unset!');
    }
    if (args.toClientId !== undefined && args.toClientId !== null) {
      this.toClientId = args.toClientId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toClientId is unset!');
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field content is unset!');
    }
    if (args.messageType !== undefined && args.messageType !== null) {
      this.messageType = args.messageType;
    }
  }
};
aios.ClientMessage.prototype = {};
aios.ClientMessage.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.fromClientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.toClientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.messageType = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.ClientMessage.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('ClientMessage');
  if (this.fromClientId !== null && this.fromClientId !== undefined) {
    output.writeFieldBegin('fromClientId', Thrift.Type.STRING, 1);
    output.writeString(this.fromClientId);
    output.writeFieldEnd();
  }
  if (this.toClientId !== null && this.toClientId !== undefined) {
    output.writeFieldBegin('toClientId', Thrift.Type.STRING, 2);
    output.writeString(this.toClientId);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.messageType !== null && this.messageType !== undefined) {
    output.writeFieldBegin('messageType', Thrift.Type.STRING, 4);
    output.writeString(this.messageType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

// serve
aios.AIOSService_registerClient_args = function (args) {
  this.clientId = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientId is unset!');
    }
  }
};
aios.AIOSService_registerClient_args.prototype = {};
aios.AIOSService_registerClient_args.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.clientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_registerClient_args.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_registerClient_args');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_registerClient_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new aios.RegisterResponse(args.success);
    }
  }
};
aios.AIOSService_registerClient_result.prototype = {};
aios.AIOSService_registerClient_result.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new aios.RegisterResponse();
          this.success[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_registerClient_result.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_registerClient_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_unregisterClient_args = function (args) {
  this.clientId = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientId is unset!');
    }
  }
};
aios.AIOSService_unregisterClient_args.prototype = {};
aios.AIOSService_unregisterClient_args.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.clientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_unregisterClient_args.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_unregisterClient_args');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_unregisterClient_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new aios.RegisterResponse(args.success);
    }
  }
};
aios.AIOSService_unregisterClient_result.prototype = {};
aios.AIOSService_unregisterClient_result.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new aios.RegisterResponse();
          this.success[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_unregisterClient_result.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_unregisterClient_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_sendIntent_args = function (args) {
  this.intent = null;
  if (args) {
    if (args.intent !== undefined && args.intent !== null) {
      this.intent = new aios.IntentMessage(args.intent);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field intent is unset!');
    }
  }
};
aios.AIOSService_sendIntent_args.prototype = {};
aios.AIOSService_sendIntent_args.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.intent = new aios.IntentMessage();
          this.intent[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_sendIntent_args.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_sendIntent_args');
  if (this.intent !== null && this.intent !== undefined) {
    output.writeFieldBegin('intent', Thrift.Type.STRUCT, 1);
    this.intent[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_sendIntent_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new aios.CommonResponse(args.success);
    }
  }
};
aios.AIOSService_sendIntent_result.prototype = {};
aios.AIOSService_sendIntent_result.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new aios.CommonResponse();
          this.success[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_sendIntent_result.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_sendIntent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_sendToClient_args = function (args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new aios.ClientMessage(args.message);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
aios.AIOSService_sendToClient_args.prototype = {};
aios.AIOSService_sendToClient_args.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new aios.ClientMessage();
          this.message[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_sendToClient_args.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_sendToClient_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSService_sendToClient_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new aios.CommonResponse(args.success);
    }
  }
};
aios.AIOSService_sendToClient_result.prototype = {};
aios.AIOSService_sendToClient_result.prototype[Symbol.for("read")] = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new aios.CommonResponse();
          this.success[Symbol.for("read")](input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aios.AIOSService_sendToClient_result.prototype[Symbol.for("write")] = function (output) {
  output.writeStructBegin('AIOSService_sendToClient_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aios.AIOSServiceClient = function (input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
aios.AIOSServiceClient.prototype = {};

aios.AIOSServiceClient.prototype.registerClient = function (clientId, callback) {
  this.send_registerClient(clientId, callback);
  if (!callback) {
    return this.recv_registerClient();
  }
};

aios.AIOSServiceClient.prototype.send_registerClient = function (clientId, callback) {
  var params = {
    clientId: clientId
  };
  var args = new aios.AIOSService_registerClient_args(params);
  try {
    this.output.writeMessageBegin('registerClient', Thrift.MessageType.CALL, this.seqid);
    args[Symbol.for("write")](this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recv_registerClient();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

aios.AIOSServiceClient.prototype.recv_registerClient = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new aios.AIOSService_registerClient_result();
  result[Symbol.for("read")](this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'registerClient failed: unknown result';
};

aios.AIOSServiceClient.prototype.unregisterClient = function (clientId, callback) {
  this.send_unregisterClient(clientId, callback);
  if (!callback) {
    return this.recv_unregisterClient();
  }
};

aios.AIOSServiceClient.prototype.send_unregisterClient = function (clientId, callback) {
  var params = {
    clientId: clientId
  };
  var args = new aios.AIOSService_unregisterClient_args(params);
  try {
    this.output.writeMessageBegin('unregisterClient', Thrift.MessageType.CALL, this.seqid);
    args[Symbol.for("write")](this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recv_unregisterClient();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

aios.AIOSServiceClient.prototype.recv_unregisterClient = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new aios.AIOSService_unregisterClient_result();
  result[Symbol.for("read")](this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'unregisterClient failed: unknown result';
};

aios.AIOSServiceClient.prototype.sendIntent = function (intent, callback) {
  this.send_sendIntent(intent, callback);
  if (!callback) {
    return this.recv_sendIntent();
  }
};

aios.AIOSServiceClient.prototype.send_sendIntent = function (intent, callback) {
  var params = {
    intent: intent
  };
  var args = new aios.AIOSService_sendIntent_args(params);
  try {
    this.output.writeMessageBegin('sendIntent', Thrift.MessageType.CALL, this.seqid);
    args[Symbol.for("write")](this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recv_sendIntent();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

aios.AIOSServiceClient.prototype.recv_sendIntent = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new aios.AIOSService_sendIntent_result();
  result[Symbol.for("read")](this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sendIntent failed: unknown result';
};

aios.AIOSServiceClient.prototype.sendToClient = function (message, callback) {
  this.send_sendToClient(message, callback);
  if (!callback) {
    return this.recv_sendToClient();
  }
};

aios.AIOSServiceClient.prototype.send_sendToClient = function (message, callback) {
  var params = {
    message: message
  };
  var args = new aios.AIOSService_sendToClient_args(params);
  try {
    this.output.writeMessageBegin('sendToClient', Thrift.MessageType.CALL, this.seqid);
    args[Symbol.for("write")](this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recv_sendToClient();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

aios.AIOSServiceClient.prototype.recv_sendToClient = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new aios.AIOSService_sendToClient_result();
  result[Symbol.for("read")](this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sendToClient failed: unknown result';
};

export default aios